import React from"react";const dataCache=[];function saveDataToCache(t,e,a){for(let s=0,r=dataCache.length;s<r;s++){const r=dataCache[s];if(r.url===t)return r.params=JSON.stringify(e),void(r.data=a)}dataCache.push({url:t,params:JSON.stringify(e),data:a})}function getDataFromCache(t,e){for(let a=0,s=dataCache.length;a<s;a++){const s=dataCache[a];if(s.url===t){if(JSON.stringify(e)===s.params)return s.data;break}}return null}function IsLoading(t){return 0===t.fetchState&&t.children?t.children:null}function HasError(t){if(!(-1===t.fetchState)||!t.children)return null;let e=t.error;return"string"==typeof e&&-1===e.indexOf("Error")&&(e="Error - "+e),React.cloneElement(t.children,{error:e})}function IsLoaded(t){return 1===t.fetchState?React.cloneElement(t.children,{data:t.data,params:t.params,handleChange:t.handleChange}):null}export default class JsonData extends React.Component{constructor(t){super(t),this._isFetching=!1,this._isMounted=!1,this.fetchData=this.fetchData.bind(this),this.handleChange=this.handleChange.bind(this),this.state={fetchState:0,error:null,params:this.getUrlParams(),data:null}}getUrlParams(){const t={};for(const e in this.props)"url"!==e&&"string"==typeof this.props[e]&&(t[e]=this.props[e]);return t}componentDidMount(){if(this._isMounted=!0,this.props.loadOnlyOnce){const t=getDataFromCache(this.props.url,this.getUrlParams());if(null!==t)return void this.setState({fetchState:1,data:t})}this.fetchData()}componentDidUpdate(t,e){this.buildUrl(e.params)!==this.buildUrl(this.props)&&this.setState({params:this.getUrlParams()},this.fetchData)}componentWillUnmount(){this._isMounted=!1}buildUrl(t){let e=this.props.url;if(Object.keys(t).length>0)for(var a in t)e.indexOf(":"+a)>-1&&(e=e.replace(new RegExp(":"+a,"g"),encodeURIComponent(t[a])));return e}fetchData(){const t=this.buildUrl(this.state.params);if(this._isFetching)return;this._isFetching=!0;let e={mode:"cors",cache:"no-store",credentials:"same-origin"};this.props.fetchOptions&&(e=this.props.fetchOptions),this.props.fetchHeaders&&(e.headers=this.props.fetchHeaders),this.setState({fetchState:0},()=>{fetch(t,e).then(t=>{const e=t.status;if(e>=200&&e<300||304===e)return Promise.resolve(t);{const a="Error loading data. Server Response Code: "+e+", Response Text: "+t.statusText;return Promise.reject(a)}}).then(t=>t.json()).then(t=>{this._isMounted&&this.setState({fetchState:1,data:t}),this.props.loadOnlyOnce&&saveDataToCache(this.props.url,this.getUrlParams(),t)}).catch(t=>{this._isMounted&&this.setState({fetchState:-1,error:t.toString()})}).finally(()=>{this._isFetching=!1,this.updateView()})})}handleChange(t=null){this._isMounted&&this.setState({data:null===t?this.state.data:t})}updateView(){"function"==typeof this.props.onViewUpdated&&this.props.onViewUpdated()}render(){return React.createElement(React.Fragment,null,React.createElement(IsLoading,{fetchState:this.state.fetchState},this.props.isLoading),React.createElement(HasError,{fetchState:this.state.fetchState,error:this.state.error},this.props.hasError),React.createElement(IsLoaded,{fetchState:this.state.fetchState,data:this.state.data,params:this.state.params,handleChange:this.handleChange},this.props.isLoaded))}};